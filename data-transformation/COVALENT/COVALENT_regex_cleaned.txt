let
    Source = Csv.Document(File.Contents("Z:\QuickHMNY\data_in\COVAL\COVALENT_regex_cleaned.csv"),[Delimiter=",", Columns=477, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"record_id", Int64.Type}, {"redcap_event_name", type text}, {"redcap_repeat_instrument", type text}, {"redcap_repeat_instance", Int64.Type}, {"redcap_data_access_group", type text}, {"vis_nd___1", Int64.Type}, {"vis_nd___unk", Int64.Type}, {"vis_nd___na", Int64.Type}, {"vis_nd___nd", Int64.Type}, {"vis_nd___oth", Int64.Type}, {"vis_dte", type date}, {"vis_reason", type text}, {"visit_complete", Int64.Type}, {"vis_am_v2", Int64.Type}, {"vis_dte_v2", type date}, {"vis_reason_v2", type text}, {"vis_wic_v2", Int64.Type}, {"visit_ggd_complete", Int64.Type}, {"inf_ny", Int64.Type}, {"inf_dte", type date}, {"informed_consent_complete", Int64.Type}, {"inc01", Int64.Type}, {"inc02", Int64.Type}, {"inc03", Int64.Type}, {"inc04", Int64.Type}, {"inc04_1", type text}, {"inc04_2", type text}, {"inc04_3", type text}, {"inc04_4", type text}, {"inc_04_check___1", Int64.Type}, {"inc_04_check___2", Int64.Type}, {"inc_04_check___3", Int64.Type}, {"inc_04_check___4", Int64.Type}, {"inc_04_check___unk", Int64.Type}, {"inc_04_check___na", Int64.Type}, {"inc_04_check___nd", Int64.Type}, {"inc_04_check___oth", Int64.Type}, {"inclusion_criteria_complete", Int64.Type}, {"exc01", Int64.Type}, {"exc02", Int64.Type}, {"exc03", Int64.Type}, {"exc04", Int64.Type}, {"exc05", Int64.Type}, {"exc06", Int64.Type}, {"exc07", type text}, {"exclusion_criteria_complete", Int64.Type}, {"incexc_ny", Int64.Type}, {"incexc_spec", type text}, {"in_and_exclusion_criteria_satisfied_complete", Int64.Type}, {"demo_age", Int64.Type}, {"demo_gender", Int64.Type}, {"demo_eth", Int64.Type}, {"demo_ethoth", type text}, {"demographics_complete", Int64.Type}, {"mhr_pdiag", Int64.Type}, {"mhr_diagspec", Int64.Type}, {"mhr_diagoth", type text}, {"mhr_ist", Int64.Type}, {"mhr_ist_01pmp_ny", Int64.Type}, {"mhr_ist_02azat_ny", Int64.Type}, {"mhr_ist_03myco_ny", Int64.Type}, {"mhr_ist_12tacr_ny", Int64.Type}, {"mhr_ist_13cycl_ny", Int64.Type}, {"mhr_ist_05ritu_ny", Int64.Type}, {"mhr_ist_06thym_ny", Int64.Type}, {"mhr_ist_09mtin_ny", Int64.Type}, {"mhr_ist_01pmp_fdte", type date}, {"mhr_ist_02azat_fdte", type text}, {"mhr_ist_03myco_fdte", type text}, {"mhr_ist_12tacr_fdte", type text}, {"mhr_ist_13cycl_fdte", type text}, {"mhr_ist_05ritu_fdte", type text}, {"mhr_ist_06thym_fdte", type text}, {"mhr_ist_09mtin_fdte", type text}, {"mhr_ist_01pmp_ldte", type date}, {"mhr_ist_02azat_ldte", type text}, {"mhr_ist_03myco_ldte", type text}, {"mhr_ist_12tacr_ldte", type text}, {"mhr_ist_13cycl_ldte", type text}, {"mhr_ist_05ritu_ldte", type text}, {"mhr_ist_06thym_ldte", type text}, {"mhr_ist_09mtin_ldte", type text}, {"mhr_ist_01pmp_cur", Int64.Type}, {"mhr_ist_02azat_cur", Int64.Type}, {"mhr_ist_03myco_cur", Int64.Type}, {"mhr_ist_12tacr_cur", Int64.Type}, {"mhr_ist_13cycl_cur", type text}, {"mhr_ist_05ritu_cur", type text}, {"mhr_ist_06thym_cur", type text}, {"mhr_ist_09mtin_cur", Int64.Type}, {"mhr_acm", Int64.Type}, {"mhr_acmx", type text}, {"mhr_hyp", Int64.Type}, {"mhr_dm", Int64.Type}, {"mhr_cad", Int64.Type}, {"mhr_clad", Int64.Type}, {"mhr_ckd", Int64.Type}, {"mhr_mal", Int64.Type}, {"mhr_malx", type text}, {"mhr_dial", Int64.Type}, {"mhr_dialdte", type text}, {"mhr_dialcur", type text}, {"mhr_transkid", Int64.Type}, {"mhr_transkiddte", type text}, {"mhr_transkiddt", type text}, {"mhr_translung", Int64.Type}, {"mhr_translungdte", type date}, {"mhr_translungdt", Int64.Type}, {"medical_history_complete", Int64.Type}, {"chs_trans", type text}, {"chs_transdte", type text}, {"chs_donor", type text}, {"chs_rej", Int64.Type}, {"chs_rejtreat", type text}, {"current_health_status_complete", Int64.Type}, {"vs_ny", Int64.Type}, {"vs_spec", type text}, {"vs_dte", type date}, {"vs_sbp", Int64.Type}, {"vs_dbp", Int64.Type}, {"vs_hr", Int64.Type}, {"vs_wgt", Int64.Type}, {"vs_bmi", type number}, {"vital_signs_complete", Int64.Type}, {"lf_lfny", Int64.Type}, {"lf_lfspec", type text}, {"lf_dte", type date}, {"lf_fev1", Int64.Type}, {"lf_fvc", type number}, {"lf_fvcbs", type number}, {"lf_fev1l", type number}, {"lf_fev1bs", type number}, {"lf_fev1fvc", type number}, {"lung_function_complete", Int64.Type}, {"lab_nmny", Int64.Type}, {"lab_nmspec", type text}, {"lab_nmdte", type text}, {"lab_nmtme", type text}, {"lab_bloodny", Int64.Type}, {"lab_bloodspec", type text}, {"lab_blooddte", type date}, {"lab_bloodtme", type time}, {"lab_hbval", type number}, {"lab_hbunit", Int64.Type}, {"lab_hbunitx", type text}, {"lab_hboor", Int64.Type}, {"lab_pltval", Int64.Type}, {"lab_pltunit", Int64.Type}, {"lab_pltunitx", type text}, {"lab_pltoor", Int64.Type}, {"lab_tlcval", type number}, {"lab_tlcunit", Int64.Type}, {"lab_tlcunitx", type text}, {"lab_tlcoor", Int64.Type}, {"lab_neuval", type number}, {"lab_neuunit", Int64.Type}, {"lab_neuunitx", type text}, {"lab_neuoor", Int64.Type}, {"lab_lymval", type number}, {"lab_lymunit", Int64.Type}, {"lab_lymunitx", type text}, {"lab_lymoor", Int64.Type}, {"lab_gluval", type number}, {"lab_gluunit", Int64.Type}, {"lab_gluunitx", type text}, {"lab_gluoor", Int64.Type}, {"lab_urval", type number}, {"lab_urunit", Int64.Type}, {"lab_urunitx", type text}, {"lab_uroor", Int64.Type}, {"lab_crval", Int64.Type}, {"lab_crunit", Int64.Type}, {"lab_crunitx", type text}, {"lab_croor", Int64.Type}, {"lab_alatval", Int64.Type}, {"lab_alatunit", Int64.Type}, {"lab_alatunitx", type text}, {"lab_alatoor", Int64.Type}, {"lab_albval", Int64.Type}, {"lab_albunit", Int64.Type}, {"lab_albunitx", type text}, {"lab_alboor", Int64.Type}, {"lab_crpval", type number}, {"lab_crpunit", Int64.Type}, {"lab_crpunitx", type text}, {"lab_crpoor", Int64.Type}, {"lab_tacval", type text}, {"lab_tacunit", Int64.Type}, {"lab_tacunitx", type text}, {"lab_tacoor", Int64.Type}, {"lab_ebvval", type text}, {"lab_ebvunit", Int64.Type}, {"lab_ebvunitx", type text}, {"lab_ebvoor", type text}, {"lab_cmvval", type text}, {"lab_cmvunit", Int64.Type}, {"lab_cmvunitx", type text}, {"lab_cmvoor", type text}, {"routine_laboratory_analyses_complete", Int64.Type}, {"bio_ser10", type text}, {"bio_ser5sp", type text}, {"bio_pbmc10", type text}, {"bio_pbmc10sp", type text}, {"bio_dte", type text}, {"bio_tme", type text}, {"sample_storage_complete", Int64.Type}, {"anti_bloodny", Int64.Type}, {"anti_bloodspec", type text}, {"anti_blooddte", type date}, {"anti_bloodtme", type text}, {"anti_bloodny_der", Int64.Type}, {"anti_blood_der_dte", type date}, {"anti_sval", type number}, {"anti_sunit", Int64.Type}, {"anti_sunitx", type text}, {"anti_nval", type number}, {"anti_nunit", Int64.Type}, {"anti_nunitx", type text}, {"anti_neuval", type text}, {"anti_neuunit", Int64.Type}, {"anti_neuunitx", type text}, {"anti_ttvny", Int64.Type}, {"anti_anitval", type text}, {"anti_anitunit", Int64.Type}, {"anti_anitunitx", type text}, {"anti_nillval", type text}, {"anti_nillunit", Int64.Type}, {"anti_nillunitx", type text}, {"anti_ag1val", type text}, {"anti_ag1unit", Int64.Type}, {"anti_ag1unitx", type text}, {"anti_ag2val", type text}, {"anti_ag2unit", Int64.Type}, {"anti_ag2unitx", type text}, {"anti_tcellny", Int64.Type}, {"anti_ifnny", Int64.Type}, {"sarscov2_antibodies_complete", Int64.Type}, {"vacc_ny", Int64.Type}, {"vacc_nx", type text}, {"vacc_man", Int64.Type}, {"vacc_manx", type text}, {"vacc_bn", Int64.Type}, {"vacc_expdte", type date}, {"vacc_dte", type date}, {"vacc_tme", type time}, {"vacc_rem", Int64.Type}, {"vacc_remx", type text}, {"vacc_sae", Int64.Type}, {"sarscov2_vaccination_complete", Int64.Type}, {"aesi_no", Int64.Type}, {"aesi_expl", type text}, {"aesi_dedte", type date}, {"aesi_dte", type date}, {"aesi_day", Int64.Type}, {"aesi_01_joi", Int64.Type}, {"aesi_02_tir", Int64.Type}, {"aesi_03_fev", Int64.Type}, {"aesi_04_shi", Int64.Type}, {"aesi_05_hea", Int64.Type}, {"aesi_06_mus", Int64.Type}, {"aesi_07_nau", Int64.Type}, {"aesi_08_red", Int64.Type}, {"aesi_09_swe", Int64.Type}, {"aesi_10_pai", Int64.Type}, {"solicited_adverse_events_questionnaire_complete", Int64.Type}, {"vaccggd_ny", Int64.Type}, {"vaccggd_nx", type text}, {"vaccggd_many", Int64.Type}, {"vaccggd_man", Int64.Type}, {"vaccggd_manx", type text}, {"vaccggd_dte", type date}, {"vaccggd_rem", Int64.Type}, {"vaccggd_remx", type text}, {"sarscov2_vaccination_ggd_complete", Int64.Type}, {"bsggd_samptaken", Int64.Type}, {"bsggd_fpdte", type text}, {"bsggd_barcode", type text}, {"bsggd_samprec", type text}, {"bsggd_bloodny", Int64.Type}, {"bsggd_bloodspec", type text}, {"bsggd_blooddte", type text}, {"bsggd_bloodtme", type time}, {"bsggd_serum", Int64.Type}, {"bsggd_serumnd", type text}, {"bsggd_hbval", type number}, {"bsggd_hbunit", Int64.Type}, {"bsggd_hbunitx", type text}, {"bsggd_hboor", type text}, {"bsggd_pltval", Int64.Type}, {"bsggd_pltunit", Int64.Type}, {"bsggd_pltunitx", type text}, {"bsggd_pltoor", type text}, {"bsggd_tlcval", type number}, {"bsggd_tlcunit", Int64.Type}, {"bsggd_tlcunitx", type text}, {"bsggd_tlcoor", type text}, {"bsggd_neuval", type number}, {"bsggd_neuunit", Int64.Type}, {"bsggd_neuunitx", type text}, {"bsggd_neuoor", type text}, {"bsggd_lymval", type number}, {"bsggd_lymunit", Int64.Type}, {"bsggd_lymunitx", type text}, {"bsggd_lymoor", type text}, {"bsggd_gluval", type number}, {"bsggd_gluunit", Int64.Type}, {"bsggd_gluunitx", type text}, {"bsggd_gluoor", type text}, {"bsggd_urval", type number}, {"bsggd_urunit", Int64.Type}, {"bsggd_urunitx", type text}, {"bsggd_uroor", type text}, {"bsggd_crval", Int64.Type}, {"bsggd_crunit", Int64.Type}, {"bsggd_crunitx", type text}, {"bsggd_croor", type text}, {"bsggd_alatval", Int64.Type}, {"bsggd_alatunit", Int64.Type}, {"bsggd_alatunitx", type text}, {"bsggd_alatoor", type text}, {"bsggd_albval", Int64.Type}, {"bsggd_albunit", Int64.Type}, {"bsggd_albunitx", type text}, {"bsggd_alboor", type text}, {"bsggd_crpval", type number}, {"bsggd_crpunit", Int64.Type}, {"bsggd_crpunitx", type text}, {"bsggd_crpoor", type text}, {"bsggd_tacval", type text}, {"bsggd_tacunit", type text}, {"bsggd_tacunitx", type text}, {"bsggd_tacoor", type text}, {"bsggd_ebvval", type text}, {"bsggd_ebvunit", type text}, {"bsggd_ebvunitx", type text}, {"bsggd_ebvoor", type text}, {"bsggd_cmvval", type text}, {"bsggd_cmvunit", type text}, {"bsggd_cmvunitx", type text}, {"bsggd_cmvoor", type text}, {"bsggd_sval", type text}, {"bsggd_sunit", Int64.Type}, {"bsggd_sunitx", type text}, {"bsggd_nval", type number}, {"bsggd_nunit", Int64.Type}, {"bsggd_nunitx", type text}, {"bsggd_neuvals", type text}, {"bsggd_neuunits", type text}, {"bsggd_neuunitxs", type text}, {"bsggd_ttvny", Int64.Type}, {"bsggd_anitval", type number}, {"bsggd_anitunit", Int64.Type}, {"bsggd_anitunitx", type text}, {"bsggd_nillval", type number}, {"bsggd_nillunit", Int64.Type}, {"bsggd_nillunitx", type text}, {"bsggd_ag1val", type number}, {"bsggd_ag1unit", Int64.Type}, {"bsggd_ag1unitx", type text}, {"bsggd_ag2val", type number}, {"bsggd_ag2unit", Int64.Type}, {"bsggd_ag2unitx", type text}, {"bsggd_tcellny", type text}, {"bsggd_ifnny", type text}, {"bsggd_bio_tme", type time}, {"bsggd_bio_dte", type text}, {"bsggd_bio_pbmc10sp", type text}, {"bsggd_bio_pbmc10", Int64.Type}, {"bsggd_bio_ser5sp", type text}, {"bsggd_bio_ser10", Int64.Type}, {"blood_sample_and_analyses_ggd_complete", Int64.Type}, {"aesi_ggd_pt", Int64.Type}, {"aesi_ggd_expl", type text}, {"aesi_ggd_dedte", type date}, {"aesi_ggd_dte", type text}, {"aesi_ggd_01_joi", Int64.Type}, {"aesi_ggd_01_joiduur", Int64.Type}, {"aesi_ggd_02_tir", Int64.Type}, {"aesi_ggd_02_tirduur", Int64.Type}, {"aesi_ggd_03_fev", Int64.Type}, {"aesi_ggd_03_fevduur", Int64.Type}, {"aesi_ggd_04_shi", Int64.Type}, {"aesi_ggd_04_shiduur", Int64.Type}, {"aesi_ggd_05_hea", Int64.Type}, {"aesi_ggd_05_headuur", Int64.Type}, {"aesi_ggd_06_mus", Int64.Type}, {"aesi_ggd_06_musduur", Int64.Type}, {"aesi_ggd_07_nau", Int64.Type}, {"aesi_ggd_07_nauduur", type text}, {"aesi_ggd_08_red", Int64.Type}, {"aesi_ggd_08_redduur", type text}, {"aesi_ggd_09_swe", Int64.Type}, {"aesi_ggd_09_sweduur", Int64.Type}, {"aesi_ggd_10_pai", Int64.Type}, {"aesi_ggd_10_paiduur", Int64.Type}, {"solicited_adverse_events_questionnaire_ggd_complete", Int64.Type}, {"cov_deyn", Int64.Type}, {"cov_deynx", type text}, {"cov_dedte", type date}, {"cov_08_dte", type date}, {"cov_01_test", Int64.Type}, {"cov_01_1_aant", Int64.Type}, {"cov_01_2_ext1_dte", type text}, {"cov_01_3_ext1_res", Int64.Type}, {"cov_01_2_ext2_dte", type text}, {"cov_01_3_ext2_res", Int64.Type}, {"cov_01_2_ext3_dte", type text}, {"cov_01_3_ext3_res", Int64.Type}, {"cov_02_testloc___1", Int64.Type}, {"cov_02_testloc___2", Int64.Type}, {"cov_02_testloc___3", Int64.Type}, {"cov_02_testloc___4", Int64.Type}, {"cov_02_testloc___7", Int64.Type}, {"cov_02_testloc___5", Int64.Type}, {"cov_02_testloc___6", Int64.Type}, {"cov_02_testloc___unk", Int64.Type}, {"cov_02_testloc___na", Int64.Type}, {"cov_02_testloc___nd", Int64.Type}, {"cov_02_testloc___oth", Int64.Type}, {"cov_02_5x", type text}, {"cov_03_hos", Int64.Type}, {"cov_04_oxt", Int64.Type}, {"cov_05_icu", Int64.Type}, {"cov_06_res", Int64.Type}, {"cov_07_med", Int64.Type}, {"covid19_questionnaire_complete", Int64.Type}, {"eos_dte", type date}, {"eos_disc", Int64.Type}, {"eos_rsn", type text}, {"eos_ae1", type text}, {"eos_dthdte", type text}, {"eos_rsnoth", type text}, {"eos_lfudte", type text}, {"eos_bbdes", Int64.Type}, {"study_completion_end_of_study_page_complete", Int64.Type}, {"covinf_diagny", Int64.Type}, {"covinf_source___1", Int64.Type}, {"covinf_source___2", Int64.Type}, {"covinf_source___3", Int64.Type}, {"covinf_source___unk", Int64.Type}, {"covinf_source___na", Int64.Type}, {"covinf_source___nd", Int64.Type}, {"covinf_source___oth", Int64.Type}, {"covinf_pcrdte", type date}, {"covinf_serodte", type text}, {"covinf_othx", type text}, {"covinf_othdte", type text}, {"covinf_antibodie", Int64.Type}, {"covid19_infection_complete", Int64.Type}, {"ae_indicator", Int64.Type}, {"ae_no", type text}, {"ae_name", type text}, {"ae_strdte", type text}, {"ae_24hrs", type text}, {"ae_stpdte", type text}, {"ae_outcome", type text}, {"ae_serious", type text}, {"ae_caus", type text}, {"ae_sev", type text}, {"adverse_events_summary_page_complete", Int64.Type}, {"cdae_llt", type text}, {"cdae_pt", type text}, {"cdae_soc", type text}, {"coding_saes_complete", type text}, {"approval___1", type text}, {"approval___unk", type text}, {"approval___na", type text}, {"approval___nd", type text}, {"approval___oth", type text}, {"approval_role___1", type text}, {"approval_role___unk", type text}, {"approval_role___na", type text}, {"approval_role___nd", type text}, {"approval_role___oth", type text}, {"approval_dte", type text}, {"approval_init", type text}, {"approval_form_complete", type text}}),

// select only relevant columns
    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"record_id", "redcap_event_name", "redcap_repeat_instrument", "redcap_repeat_instance", "redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "bsggd_blooddte"}),

// fill recap_event with empty if necessary
    #"Added Custom" = Table.AddColumn(#"Removed Other Columns", "Custom_redcap_event_name", each if([redcap_event_name] = "vacc3__28_days_arm_1" and [bsggd_blooddte] = null) then "vacc3_empty" else [redcap_event_name]),
    #"Removed Columns2" = Table.RemoveColumns(#"Added Custom",{"bsggd_blooddte"}),

// add harmonised timepoints
    #"Added Conditional Column" = Table.AddColumn(#"Removed Columns2", "Timepoint", each if [Custom_redcap_event_name] = "vacc1_arm_1" then "T0" else if [Custom_redcap_event_name] = "vacc1_arm_2" then "T0" else if [Custom_redcap_event_name] = "vacc1_arm_3" then "T0" else if [Custom_redcap_event_name] = "vacc2_arm_1" then "T2" else if [Custom_redcap_event_name] = "vacc2_arm_2" then "T2" else if [Custom_redcap_event_name] = "vacc2_arm_3" then "T2" else if [Custom_redcap_event_name] = "vacc2__28_days_arm_1" then "T4" else if [Custom_redcap_event_name] = "vacc2__28_days_arm_2" then "T4" else if [Custom_redcap_event_name] = "vacc2__28_days_arm_3" then "T4" else if [Custom_redcap_event_name] = "vacc2__6_months_arm_1" then "T5" else if [Custom_redcap_event_name] = "vacc2__6_months_arm_2" then "T5" else if [Custom_redcap_event_name] = "vacc2__6_months_arm_3" then "T5" else if [Custom_redcap_event_name] = "vacc2__12_months_arm_1" then "T6" else if [Custom_redcap_event_name] = "vacc2__12_months_arm_2" then "T6" else if [Custom_redcap_event_name] = "vacc2__12_months_arm_3" then "T6" else if [Custom_redcap_event_name] = "vacc3__28_days_arm_1" then "T10" else if [Custom_redcap_event_name] = "vacc3__28_days_arm_2" then "T10" else if [Custom_redcap_event_name] = "vacc3__28_days_arm_3" then "T10" else if [Custom_redcap_event_name] = "vacc3__6_months_arm_1" then "T11" else if [Custom_redcap_event_name] = "vacc3__6_months_arm_2" then "T11" else if [Custom_redcap_event_name] = "vacc3__6_months_arm_3" then "T11" else if [Custom_redcap_event_name] = "vacc3__12_months_arm_1" then "T12" else if [Custom_redcap_event_name] = "vacc3__12_months_arm_2" then "T12" else if [Custom_redcap_event_name] = "vacc3__12_months_arm_3" then "T12" else if [Custom_redcap_event_name] = "sot__3_months_arm_2" then "T_SOT_3_months" else if [Custom_redcap_event_name] = "sot__6_months_arm_2" then "T_SOT_6_months" else if [Custom_redcap_event_name] = "vacc3_empty" then "T_unknown" else if [Custom_redcap_event_name] = "study_completionen_arm_1" then "T_end" else if [Custom_redcap_event_name] = "study_completionen_arm_2" then "T_end" else if [Custom_redcap_event_name] = "study_completionen_arm_3" then "T_end" else "Error"),
    #"Changed Type5" = Table.TransformColumnTypes(#"Added Conditional Column",{{"Timepoint", type text}}),
    
// only select rows with redcap_instrument entries    
    #"Replaced Value" = Table.ReplaceValue(#"Changed Type5","",null,Replacer.ReplaceValue,{"redcap_repeat_instrument"}),
    #"Filtered Rows1" = Table.SelectRows(#"Replaced Value", each ([redcap_repeat_instrument] = null)),
    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows1",{"redcap_repeat_instrument", "redcap_repeat_instance"}),
    
// replace errors where necessary
    #"Replaced Errors" = Table.ReplaceErrorValues(#"Removed Columns", {{"anti_sval", null}}),
    #"Replaced Errors1" = Table.ReplaceErrorValues(#"Replaced Errors", {{"anti_nval", null}}),
    #"Replaced Errors2" = Table.ReplaceErrorValues(#"Replaced Errors1", {{"anti_neuunit", null}}),
    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Errors2","OTH",null,Replacer.ReplaceValue,{"redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "Custom_redcap_event_name", "Timepoint"}),
    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","ND",null,Replacer.ReplaceValue,{"redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "Custom_redcap_event_name", "Timepoint"}),
    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","NA",null,Replacer.ReplaceValue,{"redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "Custom_redcap_event_name", "Timepoint"}),
    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","UNK",null,Replacer.ReplaceValue,{"redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "Custom_redcap_event_name", "Timepoint"}),
    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","",null,Replacer.ReplaceValue,{"redcap_data_access_group", "vis_dte", "vis_dte_v2", "demo_age", "demo_gender", "anti_sval", "anti_sunit", "anti_sunitx", "anti_nval", "anti_nunit", "anti_nunitx", "anti_neuval", "anti_neuunit", "anti_neuunitx", "anti_ag1val", "anti_ag1unit", "anti_ag1unitx", "anti_ag2val", "anti_ag2unit", "anti_ag2unitx", "vacc_man", "vacc_dte", "cov_01_test", "cov_01_2_ext1_dte", "cov_01_3_ext1_res", "cov_01_2_ext2_dte", "cov_01_3_ext2_res", "cov_01_2_ext3_dte", "cov_01_3_ext3_res", "cov_02_testloc___1", "cov_02_testloc___2", "cov_02_testloc___3", "cov_02_testloc___4", "cov_02_testloc___7", "cov_02_testloc___5", "cov_02_testloc___6", "eos_dte", "eos_rsn", "Custom_redcap_event_name", "Timepoint"}),
    
// rename some columns with harmonised naming convention
    #"Renamed Columns" = Table.RenameColumns(#"Replaced Value5",{{"record_id", "Participant Id"}, {"anti_sval", "Anti RBD"}, {"anti_neuval", "PRNT50 Wildtype"},{"anti_nval", "Anti N"}, {"redcap_data_access_group", "Assay Location"}}),
    
// add assay location
    #"Replaced Value6" = Table.ReplaceValue(#"Renamed Columns","10__umcg","UMCG",Replacer.ReplaceValue,{"Assay Location"}),
    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","11__erasmus_mc","Erasmus",Replacer.ReplaceValue,{"Assay Location"}),

// merge to get visitation / sample dates
    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Replaced Value7", {{"vis_dte", type text}, {"vis_dte_v2", type text}}, "en-GB"),{"vis_dte", "vis_dte_v2"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"Sample Dte"),
    #"Replaced Value8" = Table.ReplaceValue(#"Merged Columns","",null,Replacer.ReplaceValue,{"Sample Dte"}),

// rename infection columns
    #"Rename inf dte" = Table.RenameColumns(#"Replaced Value8",{{"cov_01_test", "Infection Result"}, {"cov_01_2_ext1_dte", "Infection Dte 1"}, {"cov_01_2_ext2_dte", "Infection Dte 2"}, {"cov_01_2_ext3_dte", "Infection Dte 3"}}),
    #"Rename test loc" = Table.RenameColumns(#"Rename inf dte",{{"cov_02_testloc___1", "Test location - GGD"}, {"cov_02_testloc___2", "Test location - Hospital"}, {"cov_02_testloc___3", "Test location - Commercial"}, {"cov_02_testloc___4", "Test location - Home with GP"}, {"cov_02_testloc___7", "Test location - Self test"}, {"cov_02_testloc___5", "Test location - Other"}, {"cov_02_testloc___6", "Test location - Unknown"}}),
    #"Rename inf result" = Table.RenameColumns(#"Rename test loc",{{"cov_01_3_ext1_res", "Infection Result 1"}, {"cov_01_3_ext2_res", "Infection Result 2"}, {"cov_01_3_ext3_res", "Infection Result 3"}}),
    #"Removed Columns3" = Table.RemoveColumns(#"Rename inf result",{"Infection Result"}),
    
// rename demographic columns
    #"Renamed demograph" = Table.RenameColumns(#"Removed Columns3",{{"eos_dte", "Dropout Dte"}, {"eos_rsn", "Dropout Reason"}, {"vacc_dte", "Vaccination Dte"}, {"vacc_man", "Vaccine Brand"}, {"demo_age", "Age"}, {"demo_gender", "Gender"}}),

// add new test and unit columns 
    #"Added Conditional Column1" = Table.AddColumn(#"Renamed demograph", "Anti RBD unit", each if [Anti RBD] <> null then "BAU/mL" else null),
    #"Added Conditional Column2" = Table.AddColumn(#"Added Conditional Column1", "Anti N unit", each if [Anti N] <> null then "S/CO" else null),
    #"Added Conditional Column6" = Table.AddColumn(#"Added Conditional Column2", "PRNT50 unit", each if [PRNT50 Wildtype] <> null then "IU/mL" else null),
    #"Added Conditional Column3" = Table.AddColumn(#"Added Conditional Column6", "Anti S1 Test", each if [Anti RBD] <> null then "Liaison" else null),
    #"Added Conditional Column4" = Table.AddColumn(#"Added Conditional Column3", "Anti N Test", each if [Anti N] <> null then "Elisa Abbot Alinity" else null),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Conditional Column4",{{"PRNT50 Wildtype", type number}, {"PRNT50 unit", type text}, {"Anti N unit", type text}, {"Anti RBD unit", type text}}),
 
// refactor dates
    #"Changed Type2" = Table.TransformColumnTypes(#"Changed Type1",{{"Infection Dte 1", type date}, {"Infection Dte 2", type date}, {"Infection Dte 3", type date}}),
    #"Changed Type with Locale" = Table.TransformColumnTypes(#"Changed Type2", {{"Sample Dte", type date}}, "en-GB"),

// remove unnecessary columns
    #"Removed Columns5" = Table.RemoveColumns(#"Changed Type with Locale",{"anti_sunit", "anti_sunitx", "anti_nunit", "anti_nunitx", "anti_neuunit", "anti_neuunitx", "anti_ag1unit", "anti_ag1unitx", "anti_ag2unit", "anti_ag2unitx","anti_ag1val", "anti_ag2val", "Custom_redcap_event_name"}),
    
// create patient subgroups from recap_events
    #"Split Column by Delimiter" = Table.SplitColumn(#"Removed Columns5", "redcap_event_name", Splitter.SplitTextByDelimiter("_arm_", QuoteStyle.None), {"redcap_event_name.1", "redcap_event_name.2"}),
    #"Changed Type3" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"redcap_event_name.1", type text}, {"redcap_event_name.2", Int64.Type}}),
    #"Added Conditional Column5" = Table.AddColumn(#"Changed Type3", "Subgroup", each if [redcap_event_name.2] = 1 then "Adult Lung Transplant Recipient, going to be vaccinated" else if [redcap_event_name.2] = 2 then "Adult Lung Transplant Waiting List Patient, going to be vaccinated" else if [redcap_event_name.2] = 3 then "Adult Lung Transplant Recipient with past COVID-19 Infection, going to be vaccinated" else null),
    #"Changed Type4" = Table.TransformColumnTypes(#"Added Conditional Column5",{{"Subgroup", type text}}),
    #"Removed Columns6" = Table.RemoveColumns(#"Changed Type4",{"redcap_event_name.1", "redcap_event_name.2"}),

// reorder for visual inspection
    #"Reordered Columns1" = Table.ReorderColumns(#"Removed Columns6",{"Participant Id", "Age", "Gender", "Subgroup", "Assay Location", "Timepoint", "Sample Dte", "Dropout Dte", "Anti RBD", "Anti RBD unit", "Anti S1 Test", "Anti N", "Anti N unit", "Anti N Test", "PRNT50 Wildtype", "PRNT50 unit", "Vaccination Dte", "Vaccine Brand", "Infection Dte 1", "Infection Result 1", "Infection Dte 2", "Infection Result 2", "Infection Dte 3", "Infection Result 3"}),
    
//=== new applied steps
    #"--Replaced Infection1" = Table.ReplaceValue(#"Reordered Columns1",each [Infection Dte 1], each if [Infection Result 1] = 1 then [Infection Dte 1] else null, Replacer.ReplaceValue,{"Infection Dte 1"}),
    #"--Replaced Infection2" = Table.ReplaceValue(#"--Replaced Infection1",each [Infection Dte 2], each if [Infection Result 2] = 1 then [Infection Dte 2] else null, Replacer.ReplaceValue,{"Infection Dte 2"}),
    #"--Replaced Infection3" = Table.ReplaceValue(#"--Replaced Infection2",each [Infection Dte 3], each if [Infection Result 3] = 1 then [Infection Dte 3] else null, Replacer.ReplaceValue,{"Infection Dte 3"}),
    #"--Removed Other Columns1" = Table.SelectColumns(#"--Replaced Infection3",{"Participant Id", "Age", "Gender", "Subgroup", "Assay Location", "Timepoint", "Sample Dte", "Dropout Dte", "Anti RBD", "Anti RBD unit", "Anti S1 Test", "Anti N", "Anti N unit", "Anti N Test", "PRNT50 Wildtype", "PRNT50 unit", "Vaccination Dte", "Vaccine Brand", "Infection Dte 1", "Infection Dte 2", "Infection Dte 3"})
in
    #"--Removed Other Columns1"